generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                         Int                   @id @default(autoincrement())
  name                       String
  email                      String                @unique
  password                   String
  isVerified                 Boolean               @default(false)
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  verificationCode           String?
  verificationCodeExpiration DateTime?
  lastVerificationRequest    DateTime              @default(now())
  role                       Role                  @default(user)
  comunicacaocomejaca        String?
  comunicacaomovimento       String?
  telefone                   String?
  resetTokenVersion          Int                   @default(0)
  instituicoesAtualizadas    InstituicaoEspirita[] @relation("InstituicaoAtualizadaPor")
  instituicoesCriadas        InstituicaoEspirita[] @relation("InstituicaoCriadaPor")
  Participante2025           Participante2025[]
  passwordResetTokens        PasswordResetToken[]
  instituicoes               InstituicaoEspirita[] @relation("InstituicaoEspiritaToUsers")

  @@map("Users")
}

model InstituicaoEspirita {
  id               Int                @id @default(autoincrement())
  nome             String
  estado           String?
  cidade           String?
  bairro           String?
  logradouro       String?
  numero           String?
  complemento      String?
  telefone         String?
  email            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  criadoPorId      Int?
  sigla            String
  CEU              String?
  dia              String?
  horario          String?
  atualizadoPorId  Int?
  CNPJ             String             @unique
  nome_CNPJ        String?
  atualizadoPor    Users?             @relation("InstituicaoAtualizadaPor", fields: [atualizadoPorId], references: [id])
  criadoPor        Users?             @relation("InstituicaoCriadaPor", fields: [criadoPorId], references: [id])
  Participante2025 Participante2025[]
  Users            Users[]            @relation("InstituicaoEspiritaToUsers")

  @@map("InstituicaoEspirita")
}

model Participante2025 {
  id                           String               @id @default(uuid())
  nomeCompleto                 String
  dataNascimento               DateTime
  email                        String
  telefone                     String
  nomeCompletoResponsavel      String?
  documentoResponsavel         String?
  telefoneResponsavel          String?
  tipoParticipacao             TipoParticipacao
  tamanhoCamisa                String?
  cep                          String
  estado                       String?
  cidade                       String?
  bairro                       String?
  logradouro                   String?
  numero                       String?
  complemento                  String?
  medicacao                    String?
  alergia                      String?
  outrasInformacoes            String?
  userId                       Int?
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  IE                           String
  instituicaoId                Int?
  nomeSocial                   String?
  vegetariano                  String               @default("N/A")
  camisa                       Boolean?
  deficienciaAuditiva          Boolean?
  deficienciaAutismo           Boolean?
  deficienciaFisica            Boolean?
  deficienciaIntelectual       Boolean?
  deficienciaOutra             Boolean?
  deficienciaOutraDescricao    String?
  deficienciaParalisiaCerebral Boolean?
  deficienciaVisual            Boolean?
  primeiraComejaca             Boolean?             @default(false)
  sexo                         String
  comissao                     String?
  outroGenero                  String?
  linkPagamento                String?
  idade                        Int?
  statusPagamento              String?
  valor                        Float?
  cpf                          String?
  otherInstitution             String?
  nomeCracha                   String?
  instituicao                  InstituicaoEspirita? @relation(fields: [instituicaoId], references: [id])
  user                         Users?               @relation(fields: [userId], references: [id])

  @@map("Participantes2025")
}

model Pagamento {
  id               Int      @id @default(autoincrement())
  nomeparticipante String
  comprovanteUrl   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("Pagamentos")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])

  @@map("PasswordResetToken")
}

enum Role {
  user
  admin
}

enum Sexo {
  Masculino_CIS   @map("Masculino CIS")
  Feminino_CIS    @map("Feminino CIS")
  Feminino_Trans  @map("Feminino Trans")
  Nao_binario     @map("Não Binário")
  Masculino_Trans @map("Masculino Trans")
}

enum TipoParticipacao {
  Confraternista
  Trabalhador
}
