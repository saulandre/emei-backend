const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { generateVerificationCode } = require('../services/validation');
const dotenv = require('dotenv');
const transporter = require('../config/mailer');
const Joi = require('joi');
const { v4: uuidv4 } = require('uuid');
const { PrismaClient, Prisma } = require('@prisma/client');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');
const prisma = new PrismaClient();
dotenv.config();

// Constantes atualizadas para mensagens
const MESSAGES = {
  errors: {
    missingFields: 'O e-mail e a senha são obrigatórios.',
    emailInUse: 'E-mail já está em uso.',
    userNotFound: 'Usuário não encontrado.',
    invalidCredentials: 'Credenciais inválidas.',
    verificationCodeInvalid: 'Código de verificação inválido ou expirado.',
    internalError: 'Erro interno do servidor.',
    invalidEmail: 'Email inválido.',
    emailExists: 'Email já cadastrado.',
    unverifiedUser: 'Por favor, verifique seu e-mail antes de fazer login.',
    invalidData: 'Dados inválidos fornecidos.',
    codeExpired: 'Código expirado. Solicite um novo.',
    resendTooSoon: 'Aguarde 60 segundos antes de reenviar o código.',
  },
  success: {
    verificationEmailSent: 'Código de verificação enviado. Verifique seu e-mail.',
    verificationCodeResent: 'Código de verificação enviado com sucesso.',
    verifiedUser: 'Usuário verificado com sucesso!',
    registeredUser: 'Usuário registrado com sucesso!',
    loggedIn: 'Login realizado com sucesso!',
    passwordReset: 'Senha redefinida com sucesso!',
    updatedUser: 'Dados atualizados com sucesso!',
    deletedUser: 'Conta removida com sucesso!',
    inscriptionCreated: 'Inscrição realizada com sucesso!',
  },
};

// const supabase = require('../config/supabase'); // Arquivo de configuração separado

const enviarComprovante = async (req, res) => { // Adicione req e res como parâmetros
  try {
    // Validação
    if (!req.body.nome || !req.file) {
      return res.status(400).json({ error: 'Nome e comprovante são obrigatórios' });
    }

    // Upload para o Supabase Storage
    const fileName = `comprovante-${Date.now()}-${req.file.originalname}`;
    const { error: uploadError } = await supabase.storage
      .from('comprovantes')
      .upload(fileName, req.file.buffer, {
        contentType: req.file.mimetype,
      });

    if (uploadError) {
      throw new Error(`Erro no upload: ${uploadError.message}`);
    }

    // Construir URL pública
    const publicUrl = `${process.env.SUPABASE_URL}/storage/v1/object/public/comprovantes/${fileName}`;

    // Inserção no banco de dados
    const { data, error } = await supabase
      .from('pagamentos')
      .insert([{
        nome: req.body.nome,
        comprovante_url: publicUrl,
        status: 'pendente'
      }]);

    if (error) {
      throw new Error(`Erro no banco de dados: ${error.message}`);
    }

    return res.status(201).json({ // Adicione return aqui
      success: true,
      message: 'Comprovante enviado com sucesso!',
      data
    });

  } catch (error) {
    console.error('Erro no controller:', error);
    
    // Verifica se a resposta já foi enviada
    if (!res.headersSent) {
      return res.status(500).json({
        error: 'Erro ao processar solicitação',
        details: error.message.replace(/supabase_key=[^\s&]+/gi, '[REDACTED]') // Esconde dados sensíveis
      });
    }
  }
};
const CODE_EXPIRATION_TIME = 15 * 60 * 1000; // 15 minutos
const RESEND_INTERVAL = 60000; // 60 segundos
 const newAccountEmail = async (name, email, code) => {
  try {
    await transporter.sendMail({
      from: `"EMEI" <${process.env.MAIL_USER}>`,
      headers: {
        'X-Mailer': 'Nodemailer',
        'X-Priority': '3',
        'Return-Path': 'process.env.MAIL_USER' 
      },
      to: email,
      subject: 'Confirmação de Cadastro',
      html: `
        <!DOCTYPE html>
        <html lang="pt-BR">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Confirmar Cadastro</title>
          <style>
            body {
              font-family: 'Arial', sans-serif;
              margin: 0;
              padding: 30px 0;
              background-color: #F2F2F2;
;
            }
            .container {
              max-width: 680px;
              margin: 0 auto;
              background-color: #ffffff;
              border-radius: 3px;
              box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            }
            .header {
              padding: 40px 30px 20px;
              border-bottom: 1px solid #e9ecef;
              text-align: center;
            }
            .header img {
              height: 40px;
            }
            .content {
              padding: 40px 30px;
              color: #4a4e69;
            }
            .code-container {
              margin: 30px 0;
              text-align: center;
            }
            .verification-code {
              display: inline-block;
              padding: 15px 30px;
              background-color: #6599FF;
              border-radius: 6px;
              font-size: 24px;
              font-weight: 600;
              color: #fff;
              letter-spacing: 2px;
            }
              a {
  color: #2b6cb0 !important;
  text-decoration: none !important;
}
            .footer {
              padding: 25px 30px;
              background-color: #f8f9fa;
              text-align: center;
              font-size: 14px;
              color: #6c757d;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <img src="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AAVtaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA5LjEtYzAwMyA3OS45NjkwYTg3LCAyMDI1LzAzLzA2LTE5OjEyOjAzICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNS0wNS0xN1QxMDowNTo1OC4xNzEiIHhtcDpNb2RpZnlEYXRlPSIyMDI1LTA1LTIyVDExOjIxOjU5LTAzOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDI1LTA1LTIyVDExOjIxOjU5LTAzOjAwIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjllNDA0NGEwLTAwZDItYzI0Zi04NWVmLWQxYTIzNjg3YzkwOCIgeG1wTU06RG9jdW1lbnRJRD0idXVpZDpmYWY1YmRkNS1iYTNkLTExZGEtYWQzMS1kMzNkNzUxODJmMWIiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0idXVpZDpmYWY1YmRkNS1iYTNk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" alt="Logo EMEI">
            </div>
            
            <div class="content">
              <p>Olá ${name},</p>
              
              <p>O seu cadastro no <strong>Portal EMEI</strong> está quase completo. <br><br>Para acessar sem restrições você precisa verificar o seu e-mail. <br> <br> Insira o código abaixo em <a href="https://www.emeirj.com.br" target="_blank">EMEI</a>.</p>

              <div class="code-container">
                <div class="verification-code">${code}</div>
              </div>

              <p>⏳ Este código é válido por 15 minutos.</p>

        

              <p>Atenciosamente,<br>
              Equipe EMEI</p>
            </div>

            <div class="footer">
              <p>Esta é uma mensagem automática. Por favor não responda este e-mail.</p>
              <p>Dúvidas? Contate-nos: emeiiraja23@gmail.com </p>
              <p>© ${new Date().getFullYear()} EMEI App. Todos os direitos reservados.</p>
            </div>
          </div>
        </body>
        </html>
      `,
    });

    console.log(`✅ E-mail de verificação enviado para: ${email}`);
  } catch (error) {
    console.error('❌ Erro ao enviar e-mail:', error);
    throw new Error('Falha no envio do e-mail');
  }
};

// Configuração do Multer
const upload = multer({ dest: 'uploads/' });







 const accountVerifiedEmail = async (name, email) => {
  try {
    await transporter.sendMail({
      from: `"EMEI" <${process.env.MAIL_USER}>`,
      headers: {
        'X-Mailer': 'Nodemailer',
        'X-Priority': '3',
        'Return-Path': 'process.env.MAIL_USER' 
      },
      to: email,
      subject: '✅ Conta Verificada',
      html: `
        <!DOCTYPE html>
        <html lang="pt-BR">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Conta Verificada</title>
          <style>
            body {
              font-family: 'Arial', sans-serif;
              margin: 0;
              padding: 30px 0;
              background-color: #F2F2F2;
            }
            .container {
              max-width: 680px;
              margin: 0 auto;
              background-color: #ffffff;
              border-radius: 8px;
              box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            }
            .header {
              padding: 40px 30px 20px;
              border-bottom: 1px solid #e9ecef;
              text-align: center;
            }
            .header img {
              height: 40px;
            }
            .content {
              padding: 40px 30px;
              color: #4a4e69;
            }
            .success-message {
              text-align: center;
              margin: 30px 0;
              font-size: 20px;
              font-weight: 600;
              color: #2ecc71;
            }
            a {
              color: #2b6cb0 !important;
              text-decoration: none !important;
            }
            .footer {
              padding: 25px 30px;
              background-color: #f8f9fa;
              text-align: center;
              font-size: 14px;
              color: #6c757d;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <img src="https://i.postimg.cc/BZBFZPqk/favicon.png" alt="Logo EMEI">
            </div>
            
            <div class="content">
              <p>Olá ${name},</p>
              
              <p>Informamos que seu acesso ao <strong>Portal EMEI</strong> foi verificado com sucesso!</p>

    

              <p>Agora você tem acesso completo ao sistema.</p>

              <p>Estamos empenhados em fazer você ter a melhor experiência.</p>

              <p>Atenciosamente,<br>
              Equipe EMEI</p>
            </div>

            <div class="footer">
              <p>Esta é uma mensagem automática. Por favor não responda este e-mail.</p>
              <p>Dúvidas? Contate-nos: emeiiraja23@gmail.com </p>
              <p>© ${new Date().getFullYear()} EMEI app. Todos os direitos reservados.</p>
            </div>
          </div>
        </body>
        </html>
      `,
    });

    console.log(`✅ E-mail de confirmação de verificação enviado para: ${email}`);
  } catch (error) {
    console.error('❌ Erro ao enviar e-mail:', error);
    throw new Error('Falha no envio do e-mail');
  }
};

 const novoCodigoEmail = async (name, email, code) => {
  try {
    await transporter.sendMail({
      from: `"EMEI" <${process.env.MAIL_USER}>`,
      to: email,
      subject: 'Novo código',
      html: `
        <!DOCTYPE html>
        <html lang="pt-BR">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Novo código</title>
          <style>
            body {
              font-family: 'Arial', sans-serif;
              margin: 0;
              padding: 30px 0;
              background-color: #ffffff;
            }
            .container {
              max-width: 680px;
              margin: 0 auto;
              background-color: #ffffff;
              border-radius: 8px;
              box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            }
            .header {
              padding: 40px 30px 20px;
              border-bottom: 1px solid #e9ecef;
              text-align: center;
            }
            .header img {
              height: 40px;
            }
            .content {
              padding: 40px 30px;
              color: #4a4e69;
            }
            .code-container {
              margin: 30px 0;
              text-align: center;
            }
            .verification-code {
              display: inline-block;
              padding: 15px 30px;
              background-color: #6599FF;
              border-radius: 6px;
              font-size: 24px;
              font-weight: 600;
              color: #fff;
              letter-spacing: 2px;
            }
              a {
  color: #2b6cb0 !important;
  text-decoration: none !important;
}
            .footer {
              padding: 25px 30px;
              background-color: #f8f9fa;
              text-align: center;
              font-size: 14px;
              color: #6c757d;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <img src="https://i.postimg.cc/BZBFZPqk/favicon.png" alt="Logo EMEI">
            </div>
            
            <div class="content">
              <p>Prezado(a) ${name},</p>
              
              <p>Seu cadastro no  <strong>Portal EMEI</strong>  está quase completo. <br><br> O próximo passo é verificar seu endereço e-mail inserindo o código abaixo através do portal <a href="https://www.emeirj.com.br" target="_blank">EMEI</a>.</p>

              <div class="code-container">
                <div class="verification-code">${code}</div>
              </div>

              <p>⏳ Este código é válido por 15 minutos.</p>

        

              <p>Atenciosamente,<br>
              Equipe EMEI</p>
            </div>

            <div class="footer">
              <p>Esta é uma mensagem automática. Por favor não responda este e-mail.</p>
              <p>Dúvidas? Contate-nos: emeiiiraja23@gmail.com </p>
              <p>© ${new Date().getFullYear()} EMEI App. Todos os direitos reservados.</p>
            </div>
          </div>
        </body>
        </html>
      `,
    });

    console.log(`✅ E-mail de verificação enviado para: ${email}`);
  } catch (error) {
    console.error('❌ Erro ao enviar e-mail:', error);
    throw new Error('Falha no envio do e-mail');
  }
};

 const verificar = async (req, res) => {
  const { userId, verificationCode } = req.body;
  console.log('Dados recebidos:', req.body);  // Adicionando log para verificar os dados

  if (!userId || !verificationCode) {
    return res.status(400).json({ error: MESSAGES.errors.missingFields });
  }

  try {
    // Busca o usuário no banco de dados
    const userId = parseInt(req.body.userId, 10); // Converte string para número

    const user = await prisma.users.findUnique({
      where: { id: userId }
    });

    if (!user) {
      return res.status(404).json({ error: MESSAGES.errors.userNotFound });
    }

    // Verifica se o código de verificação coincide
    if (user.verificationCode !== verificationCode) {
      return res.status(400).json({ error: MESSAGES.errors.verificationCodeInvalid });
    }

    // Verifica se o código de verificação expirou
    if (new Date(user.verificationCodeExpiration).getTime() < new Date().getTime()) {
      return res.status(400).json({ error: MESSAGES.errors.codeExpired });
    }

    // Atualiza o usuário e confirma a transação
    const updatedUser = await prisma.users.update({
      where: { id: userId },
      data: {
        isVerified: true,
        verificationCode: null, // Invalida o código de verificação após o uso
        verificationCodeExpiration: null, // Limpa a data de expiração
      },
    });

    // Envia o e-mail de confirmação de verificação
    await accountVerifiedEmail(updatedUser.name, updatedUser.email);

    // Geração do token após a verificação
    const token = jwt.sign(
      { id: updatedUser.id, email: updatedUser.email, isVerified: true },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    // Retorno com a mensagem de sucesso e os dados do usuário
    return res.json({
      message: MESSAGES.success.verifiedUser,
      token,
      user: {
        id: updatedUser.id,
        name: updatedUser.name,
        email: updatedUser.email,
        isVerified: updatedUser.isVerified,
      },
    });
  } catch (error) {
    console.error('Verification Error:', error);
    return res.status(500).json({
      error: MESSAGES.errors.internalError,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
    });
  }
};



 const validateToken = async (req, res) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
      return res.status(401).json({ valid: false, error: "Token não fornecido" });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    res.json({ valid: true, user: decoded });

  } catch (error) {
    let errorMessage = "Token inválido";

    if (error.name === "TokenExpiredError") {
      errorMessage = "Token expirado. Faça login novamente.";
    } else if (error.name === "JsonWebTokenError") {
      errorMessage = "Token malformado.";
    }

    res.status(401).json({ valid: false, error: errorMessage });
  }
};


 const register = async (req, res) => {

  const { name, email, password } = req.body;


 
  try {

    const isStrongPassword = (password) => {
      const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&.])[A-Za-z\d@$!%*?&.]{8,}$/;
      return strongPasswordRegex.test(password);
    };
    
    // Validação dos campos
    if (!name || !email || !password) {
      return res.status(400).json({ error: MESSAGES.errors.missingFields });
    }
    if (!isStrongPassword(password)) {
      return res.status(400).json({
        error: "A senha deve conter pelo menos 8 caracteres, incluindo uma letra maiúscula, uma minúscula, um número e um caractere especial.",
      });
    }
    // Verifica usuário existente
    const existingUser = await prisma.users.findUnique({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ error: MESSAGES.errors.emailInUse });
    }

    // Criptografia da senha
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Geração do código de verificação
    const verificationCode = generateVerificationCode();
    const verificationCodeExpiration = new Date(Date.now() + CODE_EXPIRATION_TIME);

    // Criação do usuário
    const newUser = await prisma.users.create({
      data: {
        name,
        email,
        password: hashedPassword,
        verificationCode,
        verificationCodeExpiration,
        isVerified: false,
      },
    });

    // Geração do JWT
    const token = jwt.sign(
      {
        id: newUser.id,
        email: newUser.email,
        isVerified: newUser.isVerified
      },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRATION || '2h' }
    );

    // Envio do e-mail de verificação
    await newAccountEmail(name, email, verificationCode);

    // Resposta com JWT e dados do usuário
    return res.status(201).json({
      message: MESSAGES.success.verificationEmailSent,
      token: token,
      user: {
        id: newUser.id,
        name: newUser.name,
        email: newUser.email,
        isVerified: newUser.isVerified
      }
    });

  } catch (error) {
    console.error('Registration Error:', error);
    return res.status(500).json({ 
      error: MESSAGES.errors.internalError,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

 const login = async (req, res) => {
  const { email, password } = req.body;

  try {
    console.log('Buscando usuário no banco de dados...');
    const user = await prisma.users.findUnique({ where: { email } });

    if (!user) {
      console.log('Usuário não encontrado:', email);
      return res.status(404).json({ error: MESSAGES.errors.userNotFound });
    }

    console.log('Usuário encontrado:', user);

  

    console.log('Verificando senha...');
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      console.log('Senha inválida para o usuário:', user.email);
      return res.status(401).json({ error: MESSAGES.errors.invalidCredentials });
    }

    console.log('Gerando token JWT...');
    const token = jwt.sign(
      { id: user.id, email: user.email, isVerified: true },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    console.log('Login bem-sucedido. Retornando token e dados do usuário...');
    return res.json({
      message: MESSAGES.success.loggedIn,
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        isVerified: user.isVerified,
        role: user.role,
      
      },
    });
  } catch (error) {
    console.error('Login Error:', error);
    return res.status(500).json({ error: MESSAGES.errors.internalError });
  }
};
 const resendVerificationCode = async (req, res) => {
  const { email } = req.body;

  try {
    console.log('Iniciando reenvio do código de verificação para:', email);

    // Verifica se o usuário existe
    const user = await prisma.users.findUnique({ where: { email } });

    if (!user) {
      console.log(`Usuário não encontrado: ${email}`);
      return res.status(400).json({ error: MESSAGES.errors.userNotFound });
    }

    console.log(`Usuário encontrado: ${user.name}`);

    // Gera um novo código de verificação
    const newVerificationCode = generateVerificationCode();
    const verificationCodeExpiration = new Date(Date.now() + CODE_EXPIRATION_TIME);

    // Atualiza o código e a data de expiração no banco
    await prisma.users.update({
      where: { email },
      data: {
        verificationCode: newVerificationCode,
        verificationCodeExpiration,
      },
    });

    console.log('Novo código gerado e banco de dados atualizado.');

    // Envia o e-mail de verificação
    await novoCodigoEmail(user.name, user.email, newVerificationCode);

    console.log(`E-mail de verificação enviado para: ${user.email}`);

    return res.status(200).json({ message: MESSAGES.success.verificationCodeResent });
  } catch (error) {
    console.error('Erro ao reenviar código de verificação:', error);
    return res.status(500).json({
      error: MESSAGES.errors.internalError,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
    });
  }
};




const calcularIdade = (dataNascimento) => {
  // Data de referência para cálculo da idade (19/07/2025)
  const dataReferencia = new Date('2025-07-19');
  
  // Cria um objeto Date com a data de nascimento fornecida
  const nascimento = new Date(dataNascimento);

  // Calcula a diferença em anos
  let idade = dataReferencia.getFullYear() - nascimento.getFullYear();

  // Ajusta caso o aniversário do usuário ainda não tenha ocorrido no ano de 2025
  const mesReferencia = dataReferencia.getMonth();
  const mesNascimento = nascimento.getMonth();
  const diaReferencia = dataReferencia.getDate();
  const diaNascimento = nascimento.getDate();

  if (
    mesReferencia < mesNascimento ||
    (mesReferencia === mesNascimento && diaReferencia < diaNascimento)
  ) {
    idade--; // Se o aniversário ainda não passou, subtrai um ano
  }

  return idade;
};


const mercadopago = require('mercadopago');


 const participante = async (req, res) => {
  const userId = req.userId;
  console.log("Valor de userId:", userId);
  console.log("Dados recebidos:", req.body);

  // Schema de validação completo
  const schema = Joi.object({
    // Dados Pessoais
    nomeCompleto: Joi.string().min(3).max(100).required().label('Nome Completo'),
    nomeSocial: Joi.string().min(3).max(100).allow(null, '').optional().label('Nome social'),
    nomeCracha: Joi.string().min(2).max(100).allow(null, '').required().label('Nome no crachá'),
    dataNascimento: Joi.date().iso().max(new Date()).required().label('Data de Nascimento'),
    sexo: Joi.string().required().label('Pronome'),
    email: Joi.string().email().max(100).required().label('E-mail'),
    telefone: Joi.string().pattern(/^\d{10,11}$/).required().label('Telefone'),

    // Responsável (para menores)
    tipoParticipacao: Joi.string()
      .valid('Confraternista', 'Trabalhador')
      .required()
      .label('Tipo de Participação'),
    nomeCompletoResponsavel: Joi.string()
      .min(3)
      .max(100)
      .allow(null, '')
      .optional()
      .label('Nome do Responsável'),
    documentoResponsavel: Joi.string()
      /* .pattern(/^\d{10,11}$/)  */
      .allow(null, '')
      .optional()
      .label('Documento do Responsável'),
      telefoneResponsavel: Joi.string().pattern(/^\d{10,11}$/).allow(null, '').optional().label('Telefone do Responsável'),

    // Configuração do Evento
    comissao: Joi.string()
      .valid('', 'Alimentação',  'Atendimento Fraterno', 'Núcleo Gestor', 'Divulgação', 'Estudos Doutrinários', 'Multimeios', 'Secretaria', 'Serviços Gerais', 'Recepção')
      .optional()
      .label('Comissão'),
      camisa: Joi.boolean()
      .optional()
      .label('Camisa'),
    
    tamanhoCamisa: Joi.when('camisa', {
      is: true,
      then: Joi.string().required().label('Tamanho da Camisa'), 
      otherwise: Joi.string().allow('').optional()
    }),
    
    vegetariano: Joi.string().label('Vegetarianismo'),
    

    // Endereço
    cep: Joi.string().pattern(/^\d{5}-?\d{3}$/).required().label('CEP'),
    estado: Joi.string().length(2).required().label('Estado'),
    cidade: Joi.string().max(50).required().label('Cidade'),
    IE: Joi.string().max(100).required().label('IE'),
    bairro: Joi.string().max(50).required().label('Bairro'),
    logradouro: Joi.string().max(100).required().label('Logradouro'),
    numero: Joi.string().max(10).required().label('Número'),
    complemento: Joi.string().max(50).allow(null, '').optional().label('Complemento'),
    primeiraComejaca: Joi.boolean().default(false),
    deficienciaAuditiva: Joi.boolean().default(false),
    otherInstitution: Joi.string().allow(null, '').optional().label('Outra Instituição'),
    deficienciaAutismo: Joi.boolean().default(false),
    deficienciaIntelectual: Joi.boolean().default(false),
    deficienciaParalisiaCerebral: Joi.boolean().default(false),
    deficienciaVisual: Joi.boolean().default(false),
    deficienciaFisica: Joi.boolean().default(false),
    deficienciaOutra: Joi.boolean().default(false),
    deficienciaOutraDescricao: Joi.when('deficienciaOutra', {
      is: true,
      then: Joi.string().required().messages({
        'string.empty': 'A descrição da deficiência é obrigatória.',
        'any.required': 'A descrição da deficiência é obrigatória.',
      }),
      otherwise: Joi.string().allow('').optional(),
    }),

    // Saúde
    medicacao: Joi.string().max(500).allow(null, '').optional().label('Medicação'),
    alergia: Joi.string().max(500).allow(null, '').optional().label('Alergia'),
    outrasInformacoes: Joi.string().max(1000).allow(null, '').optional().label('Outras Informações'),
    outroGenero: Joi.string().max(1000).allow(null, '').optional().label('Outros Gêneros')
  }).messages({
    'any.required': 'O campo {{#label}} é obrigatório',
    'string.empty': 'O campo {{#label}} não pode estar vazio',
    'string.pattern.base': 'Formato inválido para {{#label}}',
    'date.max': '{{#label}} não pode ser uma data futura'
  });

  // Validação dos dados
  const { error } = schema.validate(req.body, { abortEarly: false });
  if (error) {
    const errors = error.details.map(detail => ({
      field: detail.context.label,
      message: detail.message
    }));
    return res.status(400).json({
      error: MESSAGES.errors.invalidData,
      details: errors
    });
  }

  try {
    // Verificação do usuário
    const usuario = await prisma.users.findUnique({
      where: { id: userId },
      select: { id: true, isVerified: true }
    });

    if (!usuario) {
      return res.status(404).json({ error: MESSAGES.errors.userNotFound });
    }
    if (!usuario.isVerified) {
      return res.status(403).json({ error: MESSAGES.errors.unverifiedUser });
    }
    const participanteId = uuidv4();
    const dadosParticipante = {
      id: participanteId,
      ...req.body,
      userId,
      dataNascimento: new Date(req.body.dataNascimento),
    };
    
    console.log("Dados antes de tratar telefone e CEP:", dadosParticipante);
    
    // Verificação de telefone e CEP
    const camposComErro = ['cep', 'telefone', 'telefoneResponsavel', 'documentoResponsavel'];
    
    camposComErro.forEach(campo => {
      if (req.body[campo] !== undefined) {
        console.log(`${campo}:`, req.body[campo]);
      }
    });
    console.log('CEP:', req.body.cep); // Adicione isso antes da linha de tratamento
dadosParticipante.cep = req.body.cep && typeof req.body.cep === 'string' ? req.body.cep.replace(/\D/g, '') : '';

 
    dadosParticipante.telefone = req.body.telefone && typeof req.body.telefone === 'string' ? req.body.telefone.replace(/\D/g, '') : '';
    dadosParticipante.telefoneResponsavel = req.body.telefoneResponsavel && typeof req.body.telefoneResponsavel === 'string' ? req.body.telefoneResponsavel.replace(/\D/g, '') : '';
    dadosParticipante.documentoResponsavel = req.body.documentoResponsavel && typeof req.body.documentoResponsavel === 'string' ? req.body.documentoResponsavel.replace(/\D/g, '') : '';
    
    console.log("Dados após tratar telefone e CEP:", dadosParticipante);
    
    
    
 

    

    // Calcular idade
    const idade = calcularIdade(dadosParticipante.dataNascimento);

/*     // Definir valor da inscrição
    const valor = idade < 11 ? 45 : 60;

    const { email, nomeCompleto, id } = req.body;

    // Criar preferência de pagamento com o Mercado Pago
    const BASE_URL = process.env.BASE_URL || 'http://localhost:4000';
    const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000';
  
const client = new mercadopago.MercadoPagoConfig({
  accessToken: process.env.MERCADOPAGO_ACCESS_TOKEN,
});

const preference = new mercadopago.Preference(client);
const preferenceData = {
  items: [
    {
      title: 'EMEI | INSCRIÇÃO',
      quantity: 1,
      currency_id: 'BRL',
      unit_price: Number(valor),
    },
  ],
  payer: {
    email: email,
    name: nomeCompleto,

     },

     metadata: {
       participanteId:  dadosParticipante.id
    },
     payment_methods: {
  
      excluded_payment_methods: [
        { id: 'ticket' }, 
        { id: 'atm' }   
      ],
      excluded_payment_types: [
        { id: 'ticket' }
      ], 
      installments: 1, 
    },
  notification_url: `${BASE_URL}/api/auth/mercadopago/notificacao`,
  back_urls: {
    success: `${FRONTEND_URL}/sucesso`,
    failure: `${FRONTEND_URL}/falha`,
    pending: `${FRONTEND_URL}/pendente`,
  },
  auto_return: 'approved',
};



    try {
      // Criar link de pagamento
      const mpResponse = await preference.create({ body: preferenceData });

      const linkPagamento = mpResponse.init_point;
      console.log('mpResponse:', mpResponse);
      console.log('Link de pagamento:', mpResponse.init_point); 
   
    
      // Anexar dados de pagamento ao participante
      dadosParticipante.valor = valor;
      dadosParticipante.linkPagamento = linkPagamento;
      dadosParticipante.statusPagamento = 'pendente';
 */
      console.log('Dados que vão pro banco:', dadosParticipante);
      console.log('Prisma Client:', prisma);
      // Criação do participante no banco
      const novoParticipante = await prisma.participante2025.create({
        data: dadosParticipante,
        select: {
          id: true,
          nomeCompleto: true,
          nomeCracha: true,
          nomeSocial: true,
          dataNascimento: true,
          sexo: true,
          email: true,
          telefone: true,
          tipoParticipacao: true,
          nomeCompletoResponsavel: true,
          documentoResponsavel: true,
          telefoneResponsavel: true,
          cep: true,
          estado: true,
          cidade: true,
          IE: true,
          bairro: true,
          logradouro: true,
          numero: true,
          complemento: true,
          vegetariano: true,
          camisa: true,
          tamanhoCamisa: true,
          primeiraComejaca: true,
          deficienciaAuditiva: true,
          deficienciaAutismo: true,
          deficienciaIntelectual: true,
          deficienciaParalisiaCerebral: true,
          deficienciaVisual: true,
          deficienciaFisica: true,
          deficienciaOutra: true,
          deficienciaOutraDescricao: true,
          medicacao: true,
          alergia: true,
          outrasInformacoes: true,
          outroGenero: true,
       //   valor: true,
       //   linkPagamento: true,
       //   statusPagamento: true,
          otherInstitution: true
        },
      });
 //    console.log('Resposta do MercadoPago:', mpResponse);
      // Retornar dados do participante
      return res.status(201).json({
        success: true,
        message: MESSAGES.success.participantCreated,
        data: novoParticipante,
      });
    } /* catch (paymentError) {
      console.error('Erro ao criar pagamento:', paymentError);
      return res.status(500).json({
        error: MESSAGES.errors.paymentError,
        details: paymentError.message,
      });
    }
  }  */catch (err) {
    console.error('Erro ao processar participante:', err);
    return res.status(500).json({
      error: MESSAGES.errors.internalError,
      details: err.message,
    });
  }
};

const updateInscricao = async (req, res) => {
  const { id } = req.params;
  const dadosParticipante = req.body;

  try {
    // Verifica se o ID foi passado
    if (!id) {
      return res.status(400).json({ error: 'ID do participante não informado.' });
    }

    const participanteAtualizado = await prisma.participante2025.update({
      where: { id },
      data: dadosParticipante,
      select: {
        id: true,
        nomeCompleto: true,
        nomeCracha: true,
        nomeSocial: true,
        dataNascimento: true,
        sexo: true,
        email: true,
        telefone: true,
        tipoParticipacao: true,
        nomeCompletoResponsavel: true,
        documentoResponsavel: true,
        telefoneResponsavel: true,
        cep: true,
        estado: true,
        cidade: true,
        IE: true,
        bairro: true,
        logradouro: true,
        numero: true,
        complemento: true,
        vegetariano: true,
        camisa: true,
        tamanhoCamisa: true,
        primeiraComejaca: true,
        deficienciaAuditiva: true,
        deficienciaAutismo: true,
        deficienciaIntelectual: true,
        deficienciaParalisiaCerebral: true,
        deficienciaVisual: true,
        deficienciaFisica: true,
        deficienciaOutra: true,
        deficienciaOutraDescricao: true,
        medicacao: true,
        alergia: true,
        outrasInformacoes: true,
        outroGenero: true,
        valor: true,
        linkPagamento: true,
        statusPagamento: true,
        otherInstitution: true
      },
    });

    return res.status(200).json(participanteAtualizado);

  } catch (error) {
    console.error(error);
    return res.status(400).json({
      error: 'Erro ao atualizar participante.',
      detalhes: error.message
    });
  }
};

 const getparticipantes = async (req, res) => {
  try {
    // 1. Obter ID do usuário corretamente do middleware de autenticação
    const userId = req.userId;  // ✅ Correto (assumindo que o middleware populou req.user)

    // 2. Validação reforçada
    if (!userId) {
      console.warn('Tentativa de acesso não autenticada');
      return res.status(401).json({ 
        error: 'Não autorizado',
        message: 'Token de acesso inválido ou expirado' 
      });
    }

    // 3. Buscar participantes com tratamento de erros específico
    const participantes = await prisma.participante2025.findMany({
      where: { userId },
      select: {
        id: true,
        nomeCompleto: true,
        IE: true,
        createdAt: true,
      }
    });

    // 4. Melhor resposta para nenhum resultado
    if (participantes.length === 0) {
      return res.status(200).json({
        message: 'Nenhuma inscrição encontrada',
        suggestions: ['Verifique se já realizou alguma inscrição']
      });
    }

    // 5. Resposta de sucesso padronizada
    return res.status(200).json({
      count: participantes.length,
      data: participantes,
      meta: {
        requestId: req.requestId, // Assumindo que existe um ID de requisição
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    // 6. Log de erro melhorado
    console.error(`Erro [${req.requestId}] em getparticipantes:`, {
      error: error.message,
      stack: error.stack,
      userId: req.user?.userId
    });

    // 7. Resposta de erro padronizada
    return res.status(500).json({
      error: 'Erro no processamento',
      message: 'Não foi possível recuperar as inscrições',
      reference: req.requestId // Para rastreamento de logs
    });
  }
};

 const criarInstituicao = async (req, res) => {
  try {
  
    const userId = req.userId;

    // Logando o ID do usuário para verificar
    console.log("Headers recebidos:", req.headers);
    console.log("User ID recebido no controlador:", req.userId);
    if (!userId) {
      return res.status(400).json({ error: "ID do usuário não fornecido." });
    }

    // Verificando se o usuário existe
    const user = await prisma.users.findUnique({
      where: { id: userId },
    });

    // Logando o usuário para verificar se foi encontrado
    console.log("Usuário encontrado:", user);

    if (!user) {
      return res.status(404).json({ error: "Usuário não encontrado." });
    }

    // Formatando o nome conforme "Sigla - Nome - CNPJ"
    const nomeFormatado = `${req.body.sigla} - ${req.body.nome}`;

    // Logando antes de criar a instituição para verificar os dados
    console.log("Dados para criação da instituição:", req.body);

    // Criando a instituição
    const instituicao = await prisma.instituicaoEspirita.create({
      data: {
        nome: nomeFormatado,  // Usando o nome formatado
        sigla: req.body.sigla,
        CEU: req.body.CEU,
        
        estado: req.body.estado,
        cidade: req.body.cidade,
        bairro: req.body.bairro,
        logradouro: req.body.logradouro,
        numero: req.body.numero,
        complemento: req.body.complemento,
        telefone: req.body.telefone,
        horario: req.body.horario,
        dia: req.body.dia,
        email: req.body.email,
        CNPJ: req.body.CNPJ, // Incluindo o CNPJ se necessário
        criadoPor: {
          connect: { id: userId }, // Relacionando o usuário com a instituição
        },
      },
    });

    // Logando a instituição criada
    console.log("Instituição criada:", instituicao);

    return res.status(201).json(instituicao);
  } catch (error) {
    // Logando o erro para debug
    console.error("Erro ao criar instituição:", error);
    return res.status(500).json({ error: "Erro interno do servidor." });
  }
};


 const listarInstituicoes = async (req, res) => {
  try {
    // Consultando todas as instituições espíritas no banco de dados
    const instituicoes = await prisma.instituicaoEspirita.findMany();

    // Retornando a lista de instituições
    return res.status(200).json(instituicoes);
  } catch (error) {
    console.error("Erro ao listar instituições:", error);
    return res.status(500).json({ error: "Erro interno do servidor." });
  }
};
 const atualizarInstituicao = async (req, res) => {
  console.log("Request completa:", req); // 🔍 Debug geral da request
  console.log("ID do usuário recebido:", req.userId); // Verificar se está undefined
  try {
    const userId = req.userId;  // Verifique se o 'userId' está sendo passado corretamente pelo middleware

    console.log("ID do usuário:", userId);

    // Verificando se o ID do usuário foi fornecido
    if (!userId) {
      return res.status(400).json({ error: "ID do usuário não fornecido." });
    }

    // Convertendo o ID da instituição para um número inteiro
    const instituicaoId = parseInt(req.params.id, 10); 

    if (isNaN(instituicaoId)) {
      return res.status(400).json({ error: "ID da instituição inválido." });
    }

    // Verificando se o usuário existe e se é administrador
    const user = await prisma.users.findUnique({
      where: { id: userId },
    });

    if (!user) {
      return res.status(404).json({ error: "Usuário não encontrado." });
    }

    // Verificando se o usuário é administrador
    if (user.role !== 'admin') {
      return res.status(403).json({ error: "Acesso negado. Somente administradores podem atualizar." });
    }

    // Verificando se a instituição a ser atualizada existe
    const instituicao = await prisma.instituicaoEspirita.findUnique({
      where: { id: instituicaoId },  // Usando o ID convertido
    });

    if (!instituicao) {
      return res.status(404).json({ error: "Instituição não encontrada." });
    }
    const updatedInstituicao = await prisma.instituicaoEspirita.update({
      where: { id: instituicaoId }, // ID da instituição
      data: {
        nome: req.body.nome || instituicao.nome,
        sigla: req.body.sigla || instituicao.sigla,
        CEU: req.body.CEU || instituicao.CEU,
        estado: req.body.estado || instituicao.estado,
        cidade: req.body.cidade || instituicao.cidade,
        bairro: req.body.bairro || instituicao.bairro,
        logradouro: req.body.logradouro || instituicao.logradouro,
        numero: req.body.numero || instituicao.numero,
        complemento: req.body.complemento || instituicao.complemento,
        telefone: req.body.telefone || instituicao.telefone,
        horario: req.body.horario || instituicao.horario,
        dia: req.body.dia || instituicao.dia,
        email: req.body.email || instituicao.email,
        atualizadoPorId: userId, // Atualizando o ID do usuário que fez a atualização
      },
    });
    console.log(updatedInstituicao)

    return res.status(200).json(updatedInstituicao);
  } catch (error) {
    console.error("Erro ao atualizar a instituição:", error);
    return res.status(500).json({ error: "Erro interno do servidor." });
  }
};
 const updateProfile = async (req, res) => { 
  const { userId, name, email, phone, currentPassword, newPassword, communication1, communication2 } = req.body;

  // Validações de dados
  if (!userId || !name || !email || !currentPassword ) {
    return res.status(400).send('Todos os campos obrigatórios precisam ser preenchidos.');
  }

  try {
    // Verifique a senha atual (assumindo que o sistema armazena senhas de forma segura, com hash)
    const result = await pool.query('SELECT password FROM users WHERE id = $1', [userId]);

    if (result.rows.length === 0) {
      return res.status(404).send('Usuário não encontrado.');
    }

    const dbPassword = result.rows[0].password;

    // Aqui você deve comparar a senha atual (com hash) com o banco de dados (não é uma comparação simples de string)
    if (dbPassword !== currentPassword) {
      return res.status(403).send('Senha atual incorreta.');
    }

    // Atualize as informações no banco de dados
    const updateQuery = `
      UPDATE users
      SET name = $1, email = $2, phone = $3, password = $4, communication1 = $5, communication2 = $6
      WHERE id = $7
      RETURNING id
    `;
    const values = [name, email, phone, newPassword, communication1, communication2, userId];

    const updateResult = await pool.query(updateQuery, values);

    if (updateResult.rows.length === 0) {
      return res.status(400).send('Falha ao atualizar as informações.');
    }

    res.status(200).send('Perfil atualizado com sucesso.');
  } catch (error) {
    console.error('Erro ao atualizar o perfil:', error);
    res.status(500).send('Erro ao atualizar o perfil.');
  }
}

 const getProfile = async (req, res) => { 
 
    const { userId } = req.params; 
  
    try {
      // Busque os dados do usuário no banco de dados com base no userId
      const result = await pool.query('SELECT name, email, telefone, comunicacaocomejaca, comunicacaomovimento FROM users WHERE id = $1', [userId]);
  
      // Verifique se o usuário existe
      if (result.rows.length === 0) {
        return res.status(404).send('Usuário não encontrado.');
      }
  
      // Retorne os dados do perfil
      const user = result.rows[0];
      res.status(200).json({
        name: user.name,
        email: user.email,
        telefone: user.telefone,
        comunicacaocomejaca: user.comunicacaocomejaca,
        comunicacaomovimento: user.comunicacaomovimento, 
      });
    } catch (error) {
      console.error('Erro ao buscar o perfil:', error);
      res.status(500).send('Erro ao buscar o perfil.');
    }
  };
  
 const obterInscricao = async (req, res) => {
    const userId = req.userId; // Obtém o ID do usuário autenticado
    const { participanteId } = req.params; // Obtém o ID do participante da URL
  
    try {
      // Verifica se o usuário existe e está verificado
      const usuario = await prisma.users.findUnique({
        where: { id: userId },
        select: { id: true, isVerified: true }
      });
  
      if (!usuario) {
        return res.status(404).json({ error: MESSAGES.errors.userNotFound });
      }
      if (!usuario.isVerified) {
        return res.status(403).json({ error: MESSAGES.errors.unverifiedUser });
      }
  
      const inscricao = await prisma.participante2025.findUnique({
        where: { id: participanteId, userId },
        select: {
          id: true,
          nomeCompleto: true,
          nomeCracha: true,
          nomeSocial: true,
          dataNascimento: true,
          sexo: true,
          email: true,
          telefone: true,
          tipoParticipacao: true,
          nomeCompletoResponsavel: true,
          documentoResponsavel: true,
          telefoneResponsavel: true,
          comissao: true,
          camisa: true,
          tamanhoCamisa: true,
          cep: true,
          estado: true,
          cidade: true,
          bairro: true,
          logradouro: true,
          numero: true,
          complemento: true,
          medicacao: true,
          alergia: true,
          vegetariano: true,
          outrasInformacoes: true,
          IE: true,
          outroGenero: true,
          otherInstitution: true,
          primeiraComejaca: true,
          deficienciaAuditiva: true,
          deficienciaAutismo: true,
          deficienciaIntelectual: true,
          deficienciaParalisiaCerebral: true,
          deficienciaVisual: true,
          deficienciaFisica: true,
          deficienciaOutra: true,
          deficienciaOutraDescricao: true,
          statusPagamento: true,
          userId: true,
          createdAt: true,
          updatedAt: true
        }
      });
      
  
      // Se não encontrar a inscrição, retorna erro
      if (!inscricao) {
        return res.status(404).json({ error: MESSAGES.errors.registrationNotFound });
      }
  
      return res.status(200).json({
        success: true,
        message: "Dados da inscrição encontrados com sucesso!",
        data: inscricao
      });
  
    } catch (error) {
      console.error("Erro ao buscar inscrição:", error);
      
      return res.status(500).json({
        error: MESSAGES.errors.internalError,
        details: process.env.NODE_ENV === "development" ? error.message : undefined
      });
    }
  };
  
   const esquecisenha = async (req, res) => {
    const { email } = req.body;

    try {
      // Gerando um token de redefinição (expira em 1 hora)
      const resetToken = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: "1h" });
  
      // Criando o link de redefinição
      const resetLink = `https://www.emeirj.com.br/redefinir-senha?token=${resetToken}`;
  
      // Enviando o e-mail
      await transporter.sendMail({
        from: `"Seu App" <${process.env.MAIL_USER}>`,
        to: email,
        subject: "Redefinição de Senha",
        html: `
          <p>Olá,</p>
          <p>Você solicitou a redefinição de senha. Clique no link abaixo para cadastrar uma nova senha:</p>
          <p><a href="${resetLink}" target="_blank">Redefinir Senha</a></p>
          <p>Se você não solicitou essa mudança, ignore este e-mail.</p>
          <p>Este link é válido por 1 hora.</p>
        `,
      });
  
      res.json({ message: "E-mail de redefinição enviado com sucesso!" });
    } catch (error) {
      console.error("Erro ao enviar e-mail:", error);
      res.status(500).json({ error: "Erro ao enviar e-mail." });
    }
  };

  const paymentId = async (req, res) => {
    const { id } = req.params;
  
    if (req.method !== 'GET') {
      return res.status(405).json({ error: 'Método não permitido' });
    }
  
    try {
      const participante = await prisma.participante2025.findUnique({
        where: { id },
      });
  
      if (!participante || !participante.linkPagamento) {
        return res.status(404).json({ error: 'Link de pagamento não encontrado' });
      }
  
      return res.status(200).json({ init_point: participante.linkPagamento });
    } catch (error) {
      console.error('Erro ao buscar link de pagamento:', error);
      return res.status(500).json({ error: 'Erro ao buscar pagamento' });
    }
  };
  
  
  const AtualizarpaymentId = async (req, res) => {
    const { id } = req.params;
    const { statusPagamento } = req.body;
  
    console.log('ID do participante:', id); // Adicione este log para verificar o id
  
    try {
      // Verifique se o participante existe
      const participante = await prisma.participante2025.findUnique({
        where: { id },
      });
  
      if (!participante) {
        return res.status(404).json({ success: false, error: 'Participante não encontrado' });
      }
  
      // Atualiza o status de pagamento
      const updated = await prisma.participante2025.update({
        where: { id },
        data: { statusPagamento },
      });
  
      return res.status(200).json({ success: true, data: updated });
    } catch (error) {
      console.error('Erro ao atualizar status de pagamento:', error);
      return res.status(500).json({ success: false, error: 'Erro ao atualizar status de pagamento' });
    }
  };
  

  const forgotPassword = async (req, res) => {
    const { email } = req.body;
  
    const user = await prisma.users.findUnique({ where: { email } });
    if (!user) return res.status(404).json({ message: 'Usuário não encontrado' });
  
    const token = jwt.sign(
      { id: user.id, resetTokenVersion: user.resetTokenVersion },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );
  
    const resetLink = `http://emeirj.com.br/recuperarsenha/route?token=${token}`;
  
    try {
      await transporter.sendMail({
        from: `"EMEI" <${process.env.MAIL_USER}>`,
        headers: {
          'X-Mailer': 'Nodemailer',
          'X-Priority': '3',
          'Return-Path': 'process.env.MAIL_USER' 
        },
        to: email,
        subject: 'Redefinição de Senha',
        html: `
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redefinir Senha</title>
            <style>
              body {
                font-family: 'Arial', sans-serif;
                margin: 0;
                padding: 30px 0;
                background-color: #F2F2F2;
              }
              .container {
                max-width: 680px;
                margin: 0 auto;
                background-color: #ffffff;
                border-radius: 3px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
              }
              .header {
                padding: 40px 30px 20px;
                border-bottom: 1px solid #e9ecef;
                text-align: center;
              }
              .header img {
                height: 40px;
              }
              .content {
                padding: 40px 30px;
                color: #4a4e69;
              }
              .button-container {
                margin: 30px 0;
                text-align: center;
              }
              .reset-button {
                display: inline-block;
                padding: 15px 30px;
                background-color: #22223b;
                border-radius: 6px;
                font-size: 16px;
                font-weight: bold;
                color: #fff;
                text-decoration: none;
              }
              a {
                color: #fff !important;
                text-decoration: none !important;
              }
              .footer {
                padding: 25px 30px;
                background-color: #f8f9fa;
                text-align: center;
                font-size: 14px;
                color: #6c757d;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <img src="https://i.postimg.cc/BZBFZPqk/favicon.png" alt="Logo EMEI">
              </div>
              
              <div class="content">
                <p>Olá ${user.name},</p>
                
                <p>Recebemos uma solicitação para redefinir sua senha no <strong>Portal EMEI</strong>.</p>
                <p>Se você não solicitou, pode ignorar esta mensagem. </p>
      
                <div class="button-container">
                  <a href="${resetLink}" class="reset-button" target="_blank">Redefinir Senha</a>
                </div>
      
                <p>🔒 Este link é válido por 15 minutos.</p>
      
                <p>Atenciosamente,<br>
                Equipe EMEI</p>
              </div>
      
              <div class="footer">
                <p>Esta é uma mensagem automática. Por favor, não responda este e-mail.</p>
                <p>Dúvidas? Contate-nos: emeiiraja23@gmail.com</p>
                <p>© ${new Date().getFullYear()} EMEI App. Todos os direitos reservados.</p>
              </div>
            </div>
          </body>
          </html>
        `,
      });
  
      res.json({ message: 'E-mail enviado com sucesso' });
    } catch (error) {
      console.error('Erro ao enviar e-mail:', error);
      res.status(500).json({ message: 'Erro ao enviar e-mail' });
    }
  }; 

  const resetPassword = async (req, res) => {
    const { token, newPassword } = req.body;
  

    if (!token || !newPassword) {
      return res.status(400).json({ message: 'Token e nova senha são obrigatórios.' });
    }
  
    try {
      const { id: userId, resetTokenVersion } = jwt.verify(token, process.env.JWT_SECRET);
  
      const user = await prisma.users.findUnique({ where: { id: userId } });
  
      if (!user || user.resetTokenVersion !== resetTokenVersion) {
        return res.status(400).json({ message: 'Token inválido ou expirado.' });
      }
  
      const sanitizedPassword = newPassword.trim();
  
      if (sanitizedPassword.length < 6) {
        return res.status(400).json({ message: 'A nova senha deve ter pelo menos 6 caracteres.' });
      }
  
      const passwordHash = await bcrypt.hash(sanitizedPassword, 10);
  
      await prisma.users.update({
        where: { id: userId },
        data: {
          password: passwordHash,
          resetTokenVersion: { increment: 1 }, 
        },
      });
  
      return res.status(200).json({ message: 'Senha redefinida com sucesso.' });
  
    } catch (error) {
      console.error('Erro na redefinição de senha:', error);
  
      if (error.name === 'TokenExpiredError') {
        return res.status(400).json({ message: 'Token expirado. Solicite uma nova redefinição de senha.' });
      }
  
      return res.status(400).json({ message: 'Token inválido ou erro inesperado.' });
    }
  };
  
  const listarParticipantes = async (req, res) => {
    try {
      const participantes = await prisma.participante2025.findMany({
        select: {
          id: true,
          nomeCompleto: true,
          IE: true,
          statusPagamento: true,
          linkPagamento: true,
        },
      });
  
      return res.status(200).json({
        success: true,
        data: participantes,
      });
    } catch (error) {
      console.error('Erro ao listar participantes:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro ao buscar os participantes.',
      });
    }
  };


  const notificacao = async (req, res) => {
    try {
 // Verificação da assinatura secreta
 const signature = req.headers['x-signature'];
 const secret = process.env.MERCADOPAGO_WEBHOOK_SECRET; // Defina a assinatura secreta no .env

 const payload = JSON.stringify(req.body);
 const hash = crypto
   .createHmac('sha256', secret)
   .update(payload)
   .digest('hex');

 if (signature !== hash) {
   console.warn('Assinatura inválida do webhook!');
   return res.status(401).send('Assinatura inválida');
 }


      console.log('Webhook recebido:', req.body);
  
      const paymentId = req.body.data?.id;
      const topic = req.body.type;
  
      if (topic !== 'payment') {
        return res.status(200).send('Notificação ignorada');
      }
  
      const client = new mercadopago.MercadoPagoConfig({
        accessToken: process.env.MERCADOPAGO_ACCESS_TOKEN,
      });
  
      const payment = await mercadopago.Payment.findById(client, paymentId);
      const paymentInfo = payment.body;
  
      const status = paymentInfo.status; // 'approved', 'pending', etc
      const metadata = paymentInfo.metadata;
  
      const participanteId = metadata.participanteId;
  
      console.log('Pagamento recebido para participante:', participanteId, 'Status:', status);
  
      if (!participanteId) {
        return res.status(400).send('ParticipanteId ausente na metadata');
      }
  
      // Atualiza no banco (com Prisma)
      await prisma.participante2025.update({
        where: { id: participanteId },
        data: {
          statusPagamento: status,
        },
      });
  
      return res.status(200).send('OK');
    } catch (err) {
      console.error('Erro no webhook:', err);
      return res.status(500).send('Erro interno');
    }
  };
  
const atualizarPerfil = async (req, res) => {
  const { nome, email, telefone, comunicacaocomejaca, comunicacaomovimento, senha } = req.body;
  console.log('Dados recebidos para atualização:', req.body);

  try {
    const userId = req.userId; // Pega o ID do usuário autenticado pelo token
    console.log('ID do usuário extraído:', userId);

    // Encontrar o usuário
    const user = await prisma.users.findUnique({
      where: { id: userId },
    });

    // Verificar se o usuário existe
    if (!user) {
      return res.status(404).json({ error: 'Usuário não encontrado' });
    }

    // Prepara os dados de atualização
    const updateData = {
      name: nome,
      email: email,
      telefone: telefone,
      comunicacaocomejaca: comunicacaocomejaca,
      comunicacaomovimento: comunicacaomovimento,
      updatedAt: new Date(),
    };

    // Se a senha for fornecida, criptografa a nova senha
    if (senha) {
      const hashedPassword = await bcrypt.hash(senha, 10);
      updateData.password = hashedPassword;
    }

    const updatedUser = await prisma.users.update({
      where: { id: userId },
      data: updateData,
    });

    return res.status(200).json({
      message: 'Perfil atualizado com sucesso',
      user: updatedUser,
    });
  } catch (error) {
    console.error('Erro ao atualizar o perfil:', error);
    return res.status(500).json({ error: 'Erro ao atualizar o perfil' });
  }
};


  
  module.exports = { esquecisenha, obterInscricao, getProfile, updateProfile, atualizarInstituicao, listarInstituicoes, criarInstituicao, getparticipantes, participante,resendVerificationCode, login, register, validateToken,verificar, paymentId,resetPassword, forgotPassword,listarParticipantes, notificacao, AtualizarpaymentId, atualizarPerfil, updateInscricao, enviarComprovante}